Events API 
=============================
Overview
=============================

	The information contained in an event object is as follows:
	1) Id(int): unique id of the event in the database. its auto generated by application
	2) name(string): name of the event. its free-form string.
	3) tagline(string): tagline associated with the event. its free-form string.
	4) schedule(datetime): date and time when the event is supposed to occur. its free-form string.
	5) description(string): description of an event. its free-form string. 
	6) category(string): category of an event. its free-form string.
	7) subcategory(string): subcategory of an event. its free-form string.
	8) rigor_rank(int): any integer assigned by user
	9) owner(user object): a user object with a unique id, type(owner), first name and last name assigned to it.
	10) moderator(user object): a user object with a unique id, type(moderator), first name and last name assigned to it.
	11) attendees(Array of user objects): multiple users with unique id, type(attendee), first name and last name assigned to every single one of them.
	12) files(Array of file objects): multiple files with each file containing a unique id, name and base64 string of its content assigned to it.

=============================
Request:GET, BaseURL = /api/v3/app ,  Endpoint = /events?id=event_id
=============================

	Description
	-----------------------------
	This REST API gathers information on an event object identified by its unique id in the database and sends it off to the user in 
	JSON format.
		
	Input
	-----------------------------
	The required input is the event id of an existing event in the database.

	Output
	-----------------------------
	The output is in JSON format as shown below:
	{
		status: type:string values:success,error
		json: type:object value: details of the object that the API worked on e.g event or nudge
		info: type:string value: detailed error message
	}

	Example
	-----------------------------
	{
		"status": "success",
		"json": {
			"id": 2028,
			"name": "Work Bakery Event",
			"tagline": "Best cakes in the world",
			"schedule": "2023-06-12T00:00:00",
			"description": "Watch the best chefs in the world bake the best cakes in the world",
			"category": "Bake Off competition",
			"subcategory": "Baking",
			"rigor_rank": 22,
			"owner": [
				"1058",
				"Parmeet",
				"Ghai"
			],
			"moderator": [
				"1059",
				"John",
				"Tucker"
			],
			"attendees": [
				[
					"1060",
					"Kate",
					"Smalls"
				],
				[
					"1061",
					"Neil",
					"Tyson"
				]
			],
			"files": [
				[
					"1038",
					"cake1.png",
					"base64 of a picture of cake"
				],
				[
					"1039",
					"cake2.png",
					"base64 of a picture of a baked cake"
				]
			]
		},
		"info": ""
	}

=============================
Request:GET, BaseURL = /api/v3/app,  Endpoint =/events?type=latest&limit=5&page=3
=============================
	
	Description
	-----------------------------
	This REST API gathers all event objects which are scheduled for today or any other day after today in the future. it then limits the numbers 
	of these events in the result based on the "limit" parameter and sorts out of events based on the "page" parameter. Example: There are 45 
	events in the database and the user ran the query: events?type=latest&limit=5&page=3 then the result will contains events from 15th event till
	19th event. The total numbers of pages are 45 / 5 event per page = 9 pages. we are starting at page 3 which means 3 x 5 event per page = 15 are needed to be 
	overlooked and then the 5 events in page 3 starting from 15th event and ending at (15 + 5) 19th event(including the 15th event) are then given out
	in the database.
	
	Input
	-----------------------------
	The required input is type, which should always be set to "latest", limit and page where limit is the number of events in a page and the page 
	represents the page that you would see in the output

	Output
	-----------------------------
	The output is in JSON format as shown below:
	{
		status: type:string, values:success,error
		json: [] (array of event object(s))
		info: type:string, value: detailed error message
	}
	
	Example
	-----------------------------
	{
    "status": "success",
    "json": [
        {
            "id": 2028,
            "name": "Work Bakery Event",
            "tagline": "Best cakes in the world",
            "schedule": "2023-06-12T00:00:00",
            "description": "Watch the best chefs in the world bake the best cakes in the world",
            "category": "Bake Off competition",
            "subcategory": "Baking",
            "rigor_rank": 22,
            "owner": [
                "1058",
                "Parmeet",
                "Ghai"
            ],
            "moderator": [
                "1059",
                "John",
                "Tucker"
            ],
            "attendees": [
                [
                    "1060",
                    "Kate",
                    "Smalls"
                ],
                [
                    "1061",
                    "Neil",
                    "Tyson"
                ]
            ],
            "files": [
                [
                    "1038",
                    "cake1.png",
                    "base64 of a picture of cake"
                ],
                [
                    "1039",
                    "cake2.png",
                    "base64 of a picture of a baked cake"
                ]
            ]
        },
        {
            "id": 2029,
            "name": "Work Bakery Event 2",
            "tagline": "Awesome cakes in the world",
            "schedule": "2023-06-16T00:00:00",
            "description": "Watch the best chefs in the world bake the best cakes in the world",
            "category": "Bake Off competition",
            "subcategory": "Baking",
            "rigor_rank": 22,
            "owner": [
                "1062",
                "Parmeet",
                "Ghai"
            ],
            "moderator": [
                "1063",
                "John",
                "Tucker"
            ],
            "attendees": [
                [
                    "1064",
                    "Kate",
                    "Smalls"
                ],
                [
                    "1065",
                    "Neil",
                    "Tyson"
                ]
            ],
            "files": [
                [
                    "1040",
                    "cake1.png",
                    "base64 of a picture of cake"
                ],
                [
                    "1041",
                    "cake2.png",
                    "base64 of a picture of a baked cake"
                ]
            ]
        }
    ],
    "info": ""
	}

=============================
Request:POST, BaseURL = /api/v3/app,  Endpoint =/events
=============================
	Description
	-----------------------------
	This REST API lets the user add an event into the database. The body of the request should be in JSON format containing the fields mentioned below
	
	Input
	-----------------------------
	The required input as the method body should be a JSON object containing the following fields:
	{
		"name": free-form string,
		"tagline": free-form string,
		"schedule": datetime,
		"description": free-form string,
		"category": free-form string,
		"subcategory": free-form string,
		"rigor_rank": any integer,
		"owner":[id,first name,last name], (please note: id should be kept to -1 for POST request and first name and last name both should be populated 
											otherwise the entry will be ignored)
		"moderator":[id,first name,last name], (same as above)
		"attendees":[[id,first name,last name],[id,first name,last name]], (same as above except it needs to be done for each user object in the array)
		"files":[[id,name,file content in base64 format],[id,name,file content in base64 format]] ( same as above except its done for file object)
	}
	
	Example
	-----------------------------
	{
		"name":"Work Bakery Event 2",
		"tagline":"Awesome cakes in the world",
		"schedule":"2023-06-16",
		"description":"Watch the best chefs in the world bake the best cakes in the world",
		"category":"Bake Off competition",
		"subcategory":"Baking",
		"rigor_rank":22,
		"owner":[-1,"Parmeet","Ghai"],
		"moderator":[-1,"John","Tucker"],
		"attendees":[[-1,"Kate","Smalls"],[-1,"Neil","Tyson"]],
		"files":[[-1,"cake1.png","base64 of a picture of cake"],[-1,"cake2.png","base64 of a picture of a baked cake"]]
	}

	Output
	-----------------------------
	The output is in JSON format as shown below:
	{
		status: type:string, values:success,error
		json: event object 
		info: type:string, value: detailed error message
	}
	
	Example
	------------------------------
	{
    "status": "success",
    "json": {
        "id": 2029,
        "name": "Work Bakery Event 2",
        "tagline": "Awesome cakes in the world",
        "schedule": "2023-06-16T00:00:00",
        "description": "Watch the best chefs in the world bake the best cakes in the world",
        "category": "Bake Off competition",
        "subcategory": "Baking",
        "rigor_rank": 22,
        "owner": [
            "1062",
            "Parmeet",
            "Ghai"
        ],
        "moderator": [
            "1063",
            "John",
            "Tucker"
        ],
        "attendees": [
            [
                "1064",
                "Kate",
                "Smalls"
            ],
            [
                "1065",
                "Neil",
                "Tyson"
            ]
        ],
        "files": [
            [
                "1040",
                "cake1.png",
                "base64 of a picture of cake"
            ],
            [
                "1041",
                "cake2.png",
                "base64 of a picture of a baked cake"
            ]
        ]
    },
    "info": ""
	}
	
=============================
Request:PUT, BaseURL = /api/v3/app,  Endpoint =/events/{id:int}
=============================
	Description
	-----------------------------
	This REST API lets the user modify an existing event in the database. The body of the request should be in JSON format containing the fields mentioned below
	
	Input
	-----------------------------
	1) id of the event to be modified 
	2) body of the method containing JSON data in the following format.
	
	Please note that not all fields are required. You just need to mention the fields which you would like to modify 
	{
		"name": free-form string,
		"tagline": free-form string,
		"schedule": datetime,
		"description": free-form string,
		"category": free-form string,
		"subcategory": free-form string,
		"rigor_rank": any integer,
	}
	with the fields mentioned above, the value of the field will overwrite the existing value of the event object in database.
	
	{
		"owner":[id,first name,last name],
		"moderator":[id,first name,last name],
		"attendees":[[id,first name,last name],[id,first name,last name]]
	}
	for user objects, the following format is used:
	1) Id is set to -1 if a new user is needed to be created
	2) Id is set to an id of an existing user if you need to either delete the user of modify the user values	
		a) If Id is set to an Id of an existing user then leaving first name and last name as NULL will delete the user
		b) If Id is set to an Id of an existing user then setting the first name and last name will overwrite the first and last of the user in the database
		c) If Id is set to an Id of an existing user and either first name or last name is set to NULL then that object will have no effect on the existing user
		   in the database.
	
	{
		"files":[[id,name,file content in base64 format],[id,name,file content in base64 format]] ( same as above except its done for file object)
	}
	for files objects, the principle is applied
	1) Id is set to -1 if a new file is needed to be created
	2) Id is set to an id of an existing file if you need to either delete the file of modify the file values	
		a) If Id is set to an Id of an existing file then leaving name of the file and base64 of file content as NULL will delete the file
		b) If Id is set to an Id of an existing file then setting the name and the base64 data will overwrite the name and base64 data of the file in the database
		c) If Id is set to an Id of an existing file and either name of the file or base64 data is set to NULL then that object will have no effect on the existing file in the database.
		
	Example
	-----------------------------
	{
		"owner":[1058,null,null]
	}
	
	Output
	-----------------------------
	The output is in JSON format as shown below:
	{
		status: type:string, values:success,error
		json: modified event object 
		info: type:string, value: detailed error message
	}
	
	Example
	-----------------------------
	{
    "status": "success",
    "json": {
        "id": 2028,
        "name": "Work Bakery Event",
        "tagline": "Best cakes in the world",
        "schedule": "2023-06-12T00:00:00",
        "description": "Watch the best chefs in the world bake the best cakes in the world",
        "category": "Bake Off competition",
        "subcategory": "Baking",
        "rigor_rank": 22,
        "owner": [
            "-1",
            "",
            ""
        ],
        "moderator": [
            "1059",
            "John",
            "Tucker"
        ],
        "attendees": [
            [
                "1060",
                "Kate",
                "Smalls"
            ],
            [
                "1061",
                "Neil",
                "Tyson"
            ]
        ],
        "files": [
            [
                "1038",
                "cake1.png",
                "base64 of a picture of cake"
            ],
            [
                "1039",
                "cake2.png",
                "base64 of a picture of a baked cake"
            ]
        ]
    },
    "info": ""
	}
	
=============================
Request:DELETE, BaseURL = /api/v3/app,  Endpoint =/events/{id:int}
=============================
	Description
	-----------------------------
	This REST API lets the user delete an existing event in the database.
	
	Input
	-----------------------------
	1) id of the event to be modified 
	2) body of the method should be null
	
	Output
	-----------------------------
	The output is in JSON format as shown below:
	{
		status: type:string, values:success,error
		json: null
		info: type:string, value: detailed error message
	}
	
	Example
	-----------------------------
	{
    "status": "success",
    "json": "",
    "info": ""
	}